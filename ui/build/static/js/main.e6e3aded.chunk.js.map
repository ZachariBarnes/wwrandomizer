{"version":3,"sources":["Functions/GlobalFunctions.js","components/ResponseTable.js","components/InputForms.js","App.js","serviceWorker.js","index.js"],"names":["tableMaker","o","keys","Object","rowMaker","a","t","reduce","p","c","i","length","r","v","k","concat","getRolesTable","req","players","roles","calcBgs","bgRatio","html","numBGs","Math","ceil","console","log","push","sort","random","assignments","playerName","pop","roleName","assignment","Player","Role","ResponseTable","props","state","createTable","bind","map","e","index","key","this","table","Container","Row","Col","Table","striped","bordered","hover","variant","size","responsive","width","className","onClick","sortByPlayer","sortByRole","React","Component","cloneDeep","require","UNSUPPORTED_PLAYER_COUNT","InputForms","rolesGenerated","postBody","undefined","sortOrder","col","order","error","handlePlayersChange","handleRolesChange","handleSubmit","sortAssignmentsByProvidedRole","handleCalcBgChange","handleBGRatioChange","event","laurens","value","target","indexOf","split","trim","toLowerCase","numRoles","setState","myOrder","b","sortedAssignments","forEach","role","foundAssignment","find","splice","Helmet","Form","Group","controlId","Label","Control","as","label","multiline","rows","defaultValue","onChange","currentTarget","select","isInvalid","Feedback","type","Check","id","checked","inline","min","max","bsPrefix","maxLength","Button","style","marginBottom","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAuCMA,EAAc,SAAAC,GAChB,IAAIC,EAAOC,OAAOD,KAAKD,EAAE,IACrBG,EAAW,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,QAAO,SAACC,EAAGC,EAAGC,EAAGL,GAAV,OAAgBG,GAAKE,IAAML,EAAEM,OAAS,EAAI,IAAML,EAAI,IAAMG,EAAI,KAAOH,EAAI,SACjG,IAAMA,EAAI,IAAMG,EAAI,KAAOH,EAAI,OAAM,SAE/C,MAAO,UADIL,EAAEM,QAAO,SAACK,EAAGH,GAAJ,OAAUG,EAAIR,EAASF,EAAKK,QAAO,SAACM,EAAGC,GAAJ,OAAUD,EAAEE,OAAON,EAAEK,MAAK,IAAK,QAAOV,EAASF,EAAM,OAClF,YAIfc,EA9Ce,SAACC,GAAS,IAC5BC,EAAiED,EAAjEC,QAASC,EAAwDF,EAAxDE,MADkB,EACsCF,EAAjDG,eADW,WACsCH,EAAhCI,eADN,MACgB,GADhB,IACsCJ,EAAjBK,YADrB,SAEnC,GAAIF,EAAS,CACT,IAAMG,EAASC,KAAKC,KAAKP,EAAQP,OAASU,GAC1CK,QAAQC,IAAR,oDAAyDJ,EAAzD,SACA,IAAK,IAAIb,EAAI,EAAGA,EAAIa,EAAQb,IACxBS,EAAMS,KAAK,MAOnB,IAJAF,QAAQC,IAAR,2BAAgCR,EAAMR,OAAtC,iCAAqEO,EAAQP,SACzEQ,EAAMR,OAASO,EAAQP,QACvBe,QAAQC,IAAR,mBAAwBT,EAAQP,OAASQ,EAAMR,OAA/C,UAEGQ,EAAMR,OAASO,EAAQP,QAC1BQ,EAAMS,KAAK,OAGfV,EAAQW,MAAK,WAAc,MAAO,GAAML,KAAKM,YAC7CX,EAAMU,MAAK,WAAc,MAAO,GAAML,KAAKM,YAE3C,IADA,IAAMC,EAAc,GACbb,EAAQP,QAAQ,CACnB,IAAIqB,EAAad,EAAQe,MACrBC,EAAWf,EAAMc,MACfE,EAAa,CAAEC,OAAQJ,EAAYK,KAAMH,GAC/CH,EAAYH,KAAKO,GACjBT,QAAQC,IAAIK,EAAa,SAAWE,GAExC,OAAIZ,EACctB,EAAW+B,GAIlBA,G,wDC9BFO,G,MAAb,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTT,YAAa,IAEjB,EAAKU,YAAc,EAAKA,YAAYC,KAAjB,gBALJ,EADvB,yEAkBgBX,GAER,OADsBA,GAAeA,EAAYpB,OACzBoB,EAAYY,KAAI,SAACC,EAAGC,GAAJ,OACnC,wBAAIC,IAAKD,GACN,4BAAKD,EAAER,QACP,4BAAKQ,EAAEP,UAET,gCAzBd,+BA4Bc,IACEN,EAAgBgB,KAAKR,MAArBR,YACFiB,EAAQD,KAAKN,YAAYV,GAuB/B,OAtBqBA,EAAYpB,OAC1B,kBAACsC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,OAAOC,KAAK,KAAKC,WAAW,OAAOC,MAAM,OAC3E,+BACI,4BACI,wBAAIC,UAAU,WAAWC,QAASd,KAAKR,MAAMuB,cAA7C,UACA,wBAAIF,UAAU,WAAWC,QAASd,KAAKR,MAAMwB,YAA7C,eAGR,+BACKf,OAQjB,kCAnDhB,GAAmCgB,IAAMC,Y,+jBCGzC,IAAIC,EAAYC,EAAQ,IAClBC,EAA2B,wNA6UlBC,E,YA1UX,WAAY9B,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTtB,QAAS,GAYTC,MAAO,CAAC,SAAU,OAAQ,QAAS,QAAS,UAC5CC,SAAS,EACTC,QAAS,IACTiD,gBAAgB,EAChBvC,YAAa,GACbwC,cAAUC,EACVC,UAAW,CACPC,IAAK,OACLC,MAAO,WAEXC,OAAO,GAGX,EAAKC,oBAAsB,EAAKA,oBAAoBnC,KAAzB,gBAC3B,EAAKoC,kBAAoB,EAAKA,kBAAkBpC,KAAvB,gBACzB,EAAKqB,WAAa,EAAKA,WAAWrB,KAAhB,gBAClB,EAAKoB,aAAe,EAAKA,aAAapB,KAAlB,gBACpB,EAAKqC,aAAe,EAAKA,aAAarC,KAAlB,gBACpB,EAAKsC,8BAAgC,EAAKA,8BAA8BtC,KAAnC,gBACrC,EAAKuC,mBAAqB,EAAKA,mBAAmBvC,KAAxB,gBAC1B,EAAKwC,oBAAsB,EAAKA,oBAAoBxC,KAAzB,gBAnCZ,E,iFAsCCyC,GAChB,IAAMC,EAAU,CAAC,MAAO,QAAS,SAAU,SAAU,QAAS,QAAS,OAAQ,QACvEC,EAAUF,EAAMG,OAAhBD,MAFe,EAGatC,KAAKP,MAAjCrB,EAHe,EAGfA,MAAOE,EAHQ,EAGRA,QAASD,EAHD,EAGCA,QACpBF,EAAUmE,EAAME,QAAQ,KAAO,EAAIF,EAAMG,MAAM,KAAOH,EAAMG,MAAM,MACtEtE,EAAUA,EAAQyB,KAAI,SAAAC,GAClB,OAAIwC,EAAQG,QAAQ3C,EAAE6C,OAAOC,eAAiB,EACnC,iCACJ9C,EAAE6C,UAEb,IAAME,EAAWxE,EAAMR,QAAWS,EAAYI,KAAKC,KAAKP,EAAQP,OAASU,GAAY,GAC/EuD,KAAQ7B,KAAKP,MAAMoC,OAClB1D,EAAQP,OAASgF,IAClBvB,EAENrB,KAAK6C,SAAL,KACO7C,KAAKP,MADZ,CAEItB,UACA0D,a,wCAIUO,GAAQ,IACdE,EAAUF,EAAMG,OAAhBD,MADa,EAEiBtC,KAAKP,MAAnCtB,EAFa,EAEbA,QAASG,EAFI,EAEJA,QAASD,EAFL,EAEKA,QACtBD,EAAQkE,EAAME,QAAQ,KAAO,EAAIF,EAAMG,MAAM,KAAOH,EAAMG,MAAM,MAI9DG,GAHNxE,EAAQA,EAAMwB,KAAI,SAAAC,GACd,OAAOA,EAAE6C,WAEU9E,QAAWS,EAAYI,KAAKC,KAAKP,EAAQP,OAASU,GAAY,GAC/EuD,KAAQ7B,KAAKP,MAAMoC,OAClB1D,EAAQP,OAASgF,IAClBvB,EAENrB,KAAK6C,SAAL,KACO7C,KAAKP,MADZ,CAEIrB,QACAyD,a,mCAIM,IAAD,EACwB7B,KAAKP,MAAhCT,EADG,EACHA,YAAa0C,EADV,EACUA,UACXC,EAAeD,EAAfC,IAAKC,EAAUF,EAAVE,MACPkB,EAAkB,WAARnB,GAA+B,YAAVC,GAAiC,SAAVA,EAAoB,GAAK,EACrF5C,EAAYF,MAAK,SAACxB,EAAGyF,GACjB,OAAIzF,EAAEgC,KAAOyD,EAAEzD,MACH,EAAIwD,EAEZxF,EAAEgC,KAAOyD,EAAEzD,KACJ,EAAIwD,EAGR,KAEX9C,KAAK6C,SAAL,KACO7C,KAAKP,MADZ,CAEIT,cACA0C,UAAW,CACPC,IAAK,OACLC,MAAOkB,EAAU,EAAI,MAAQ,QAEjCjB,OAAO,O,0CAIKhC,GAChB,IAAMvB,EAAUuB,EAAE0C,OAAOD,MAAQ,IADd,EAEiBtC,KAAKP,MAAjCtB,EAFW,EAEXA,QAASC,EAFE,EAEFA,MAAOC,EAFL,EAEKA,QAClBuE,EAAWxE,EAAMR,QAAWS,EAAYI,KAAKC,KAAKP,EAAQP,OAASU,GAAY,GACrFK,QAAQC,IAAR,iCAAsCP,EAAtC,oBAAyDuE,EAAzD,qBAA8EzE,EAAQP,SACtF,IAAMiE,KAAQ7B,KAAKP,MAAMoC,OAClB1D,EAAQP,OAASgF,IAClBvB,EAENrB,KAAK6C,SAAL,KACO7C,KAAKP,MADZ,CAEInB,UACAuD,a,2CAKJ,IAAMxD,GAAW2B,KAAKP,MAAMpB,QADX,EAEmB2B,KAAKP,MAAjCtB,EAFS,EAETA,QAASC,EAFA,EAEAA,MAAOE,EAFP,EAEOA,QAClBsE,EAAWxE,EAAMR,QAAWS,EAAYI,KAAKC,KAAKP,EAAQP,OAASU,GAAY,GACrFK,QAAQC,IAAR,gCAAqCP,EAArC,oBAAwDuE,EAAxD,qBAA6EzE,EAAQP,SACrF,IAAMiE,KAAQ7B,KAAKP,MAAMoC,OAClB1D,EAAQP,OAASgF,IAClBvB,EAENrB,KAAK6C,SAAL,KACO7C,KAAKP,MADZ,CAEIpB,UACAwD,a,qCAIQ,IAAD,EACsB7B,KAAKP,MAAhCT,EADK,EACLA,YAAa0C,EADR,EACQA,UACXC,EAAeD,EAAfC,IAAKC,EAAUF,EAAVE,MACPkB,EAAkB,SAARnB,GAA6B,YAAVC,GAAiC,SAAVA,EAAoB,GAAK,EACnF5C,EAAYF,MAAK,SAACxB,EAAGyF,GACjB,OAAIzF,EAAE+B,OAAS0D,EAAE1D,QACL,EAAIyD,EAEZxF,EAAE+B,OAAS0D,EAAE1D,OACN,EAAIyD,EAGR,KAEX9C,KAAK6C,SAAL,KACO7C,KAAKP,MADZ,CAEIT,cACA0C,UAAW,CACPC,IAAK,SACLC,MAAOkB,EAAU,EAAI,MAAQ,a,qCAKzB,IAAD,EACkC9C,KAAKP,MAA1CtB,EADG,EACHA,QAASC,EADN,EACMA,MAAOC,EADb,EACaA,QAASC,EADtB,EACsBA,QACjC,GAAIH,EAAQP,QAAUQ,EAAMR,OAAQ,CAChC,IAAMgF,EAAWxE,EAAMR,QAAWS,EAAYI,KAAKC,KAAKP,EAAQP,OAASU,GAAY,GAGrF,GAFAK,QAAQC,IAAR,0BAA+BP,EAA/B,oBAAkDuE,EAAlD,qBAAuEzE,EAAQP,SAE3EgF,GAAYzE,EAAQP,OAAQ,CAC5B,IAAIoB,EACEwC,EAAW,CACbrD,UACAC,QACAC,UACAC,WAEJU,EAAcf,EAAckD,EAAUK,IACtCxC,EAAcgB,KAAKiC,8BAA8BjD,GACjDgB,KAAK6C,SAAL,KACO7C,KAAKP,MADZ,CAEI+B,WACAD,gBAAgB,EAChBvC,sBAIJgB,KAAK6C,SAAS,CACVhB,MAAOR,IAEX1C,QAAQC,IAAR,iBAAsByC,SAI1BrB,KAAK6C,SAAS,CACVhB,MAAOR,IAEX1C,QAAQC,IAAR,iBAAsByC,M,oDAIArC,GAAc,IAChCZ,EAAU4B,KAAKP,MAAfrB,MACJ4E,EAAoB,GAoBxB,OAnBA5E,EAAM6E,SAAQ,SAAAC,GACV,IAAIC,EAAkBnE,EAAYoE,MAAK,SAAA9F,GAAC,OACpCA,EAAEgC,OAAS4D,KACfF,EAAkBnE,KAAKsE,GACvBnE,EAAYqE,OACRrE,EAAYwD,QACRQ,EAAkBA,EAAkBpF,OAAS,IAAK,MAE9DoB,EAAYF,MAAK,SAACxB,EAAGyF,GACjB,OAAIzF,EAAEgC,KAAOyD,EAAEzD,MACH,EAERhC,EAAEgC,KAAOyD,EAAEzD,KACJ,EAGJ,KAEX0D,EAAkBnE,KAAlB,MAAAmE,EAAiB,YAAShE,IACnBgE,I,+BAGD,IAAD,OACG7E,EAAY6B,KAAKP,MAAjBtB,QAMR,OACI,yBAAK0C,UAAU,mBACX,kBAACyC,EAAA,OAAD,KACI,+BARE,oBAUN,kBAACC,EAAA,EAAD,OACOvD,KAAKP,MAAMoC,OAAS,kBAAC1B,EAAA,EAAD,KAAK,kBAACC,EAAA,EAAD,KAAK,yBAAKS,UAAU,SAASQ,KACzD,kBAAClB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACI,kBAACmD,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCAClB,kBAACF,EAAA,EAAKG,MAAN,gBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,WACbC,MAAM,UACNC,UAAU,KACVC,KAAK,KACLC,aAAc7F,EAAQP,OAASO,EApBnC,yBAqBI8F,SAAU,SAAApE,GAAO,EAAKiC,oBAAoBjC,IAC1CiB,QAAS,SAACjB,GAAQA,EAAEqE,cAAcC,UAClCC,UAAWpE,KAAKP,MAAMoC,QAE1B,kBAAC0B,EAAA,EAAKI,QAAQU,SAAd,CAAuBC,KAAK,WAA5B,kCAKR,kBAAClE,EAAA,EAAD,KACI,kBAACmD,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCAClB,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,WACbC,MAAM,QACNC,UAAU,KACVC,KAAK,KACLC,aApCM,oFAsCNC,SAAU,SAAApE,GAAO,EAAKkC,kBAAkBlC,IACxCiB,QAAS,SAACjB,GAAQA,EAAEqE,cAAcC,UAClCC,UAAWpE,KAAKP,MAAMoC,UAIlC,kBAACzB,EAAA,EAAD,OAEJ,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACmD,EAAA,EAAKgB,MAAN,CACID,KAAM,SACNE,GAAE,mBACFX,MAAK,oBACLhD,UAAU,cACV4D,QAASzE,KAAKP,MAAMpB,QACpB4F,SAAUjE,KAAKkC,wBAM/B,kBAAC/B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAKM,KAAK,MACN,kBAAC6C,EAAA,EAAD,CAAMmB,OAAO,OAAO7D,UAAU,cAE1B,2BAAOA,UAAU,SAASyD,KAAK,QAAQK,IAAI,IAAIC,IAAI,MAAMtC,MAA4B,IAArBtC,KAAKP,MAAMnB,QAAe2F,SAAU,SAAApE,GAAO,EAAKsC,oBAAoBtC,MAGpI,kBAAC0D,EAAA,EAAKC,MAAN,CAAYC,UAAU,+BAA+BiB,OAAO,QACxD,kBAACnB,EAAA,EAAKI,QAAN,CAAcC,GAAG,QACbU,KAAK,OACL5D,KAAK,KACLmE,SAAS,eACThE,UAAU,eACViE,UAAU,IACVxC,MAAOtC,KAAKP,MAAMnB,QAClB8F,UAAWpE,KAAKP,MAAMnB,QAAU,GAAK0B,KAAKP,MAAMnB,QAAU,EAC1D2F,SAAU,SAAApE,GAAC,OACP,EAAKgD,SAAL,KACO,EAAKpD,MADZ,CACmBnB,QAASuB,EAAE0C,OAAOD,YAG7C,kBAACiB,EAAA,EAAKG,MAAN,CAAY7C,UAAU,cAAc6D,OAAO,QAA3C,eAIZ,kBAACtE,EAAA,EAAD,OAEJ,kBAACmD,EAAA,EAAD,KACI,kBAACpD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC2E,EAAA,EAAD,CAAQT,KAAK,SAASzD,UAAU,MAAMmE,MAAO,CAAEC,aAAc,IAAMnE,QAASd,KAAKgC,cAAjF,aAKZ,kBAAC,EAAD,CAAehD,YAAagB,KAAKP,MAAMT,YAAagC,WAAYhB,KAAKgB,WAAYD,aAAcf,KAAKe,oB,GApU3FE,IAAMC,WCoBhBgE,E,iLAvBX,OACE,yBAAKrE,UAAU,OACb,yBAAKA,UAAU,UACb,oDAEF,yBAAKA,UAAU,QAEb,yBAAKA,UAAU,SAAf,wFACA,yBAAKA,UAAU,eAAf,6RAQF,kBAAC,EAAD,W,GAlBUI,IAAMC,WCOJiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e6e3aded.chunk.js","sourcesContent":["\n\nexport const getRolesTable = ((req) => {\n    const { players, roles, calcBgs = false, bgRatio = 0.2, html = false } = req;\n    if (calcBgs) {\n        const numBGs = Math.ceil(players.length * bgRatio);\n        console.log(`Caluclating number of BGs. \\n Creating ...${numBGs} BGs`);\n        for (var i = 0; i < numBGs; i++) {\n            roles.push(\"BG\");\n        }\n    }\n    console.log(`Number of Roles: ${roles.length}, \\nNumber of Player: ${players.length}`)\n    if (roles.length < players.length) {\n        console.log(`Creating ${players.length - roles.length} PJVs`)\n    }\n    while (roles.length < players.length) {\n        roles.push(\"PJV\");\n    }\n\n    players.sort(function () { return 0.5 - Math.random(); }); // shuffle arrays\n    roles.sort(function () { return 0.5 - Math.random(); });\n    const assignments = [];\n    while (players.length) {\n        var playerName = players.pop(), // get the last value of arr1\n            roleName = roles.pop();\n        const assignment = { Player: playerName, Role: roleName }\n        assignments.push(assignment);\n        console.log(playerName + ' gets ' + roleName);\n    }\n    if (html) {\n        const table = tableMaker(assignments)\n        return table;\n    }\n    else {\n        return assignments\n    }\n\n});\n\nconst tableMaker = (o => {\n    var keys = Object.keys(o[0]),\n        rowMaker = (a, t) => a.reduce((p, c, i, a) => p + (i === a.length - 1 ? \"<\" + t + \">\" + c + \"</\" + t + \"></tr>\"\n            : \"<\" + t + \">\" + c + \"</\" + t + \">\"), \"<tr>\"),\n        rows = o.reduce((r, c) => r + rowMaker(keys.reduce((v, k) => v.concat(c[k]), []), \"td\"), rowMaker(keys, \"th\"));\n    return \"<table>\" + rows + \"</table>\";\n});\n\n\nexport default getRolesTable;","import React from 'react';\nimport { Table, Container, Row, Col } from 'react-bootstrap';\nimport '../App.css';\n\nexport class ResponseTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            assignments: []\n        }\n        this.createTable = this.createTable.bind(this);\n    }\n\n    // componentDidUpdate(prevProps) {\n    //     if (prevProps.assignments == this.props.assignments) {\n    //         const { assignments } = this.props;\n    //         if (assignments.length) {\n    //             window.scrollTo(0, document.body.scrollHeight)\n    //         }\n    //     }\n    // }\n\n    createTable(assignments) {\n        const generateTable = assignments && assignments.length\n        return generateTable ? (assignments.map((e, index) =>\n            (<tr key={index}>\n                <td>{e.Player}</td>\n                <td>{e.Role}</td>\n            </tr>)\n        )) : (<div></div>)\n    }\n\n    render() {\n        const { assignments } = this.props;\n        const table = this.createTable(assignments)\n        const reactResults = assignments.length\n            ? (<Container>\n                <Row>\n                    <Col>\n                        <Table striped bordered hover variant=\"dark\" size=\"sm\" responsive=\"true\" width=\"50%\">\n                            <thead>\n                                <tr>\n                                    <th className=\"sortable\" onClick={this.props.sortByPlayer}>Player</th>\n                                    <th className=\"sortable\" onClick={this.props.sortByRole}>Game Role</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {table}\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container>\n            )\n            : (\n                <div></div>\n            );\n        return (\n            reactResults\n        )\n    }\n}","import React from 'react';\nimport getRolesTable from '../Functions/GlobalFunctions';\nimport { Helmet } from 'react-helmet';\nimport { Button, Form, Row, Col } from 'react-bootstrap';\nimport { ResponseTable } from './ResponseTable'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../App.css';\nvar cloneDeep = require('lodash.clonedeep');\nconst UNSUPPORTED_PLAYER_COUNT = 'The currently entered number of Players/Roles is currently unsupported.\\nThere must be at least as many players as there are roles.\\nReach out to ZachariBarnes@yahoo.com if you wish this to be a supported feature.'\n\nclass InputForms extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: [],\n            // players: [\n            //     \"Bob\",\n            //     \"george\",\n            //     \"fred\",\n            //     \"mercury\",\n            //     \"sara\",\n            //     \"zach\",\n            //     \"lauren\",\n            //     \"jimbo\",\n            //     \"mahdi\",\n            //     \"sam\"],\n            roles: ['Doctor', 'Seer', 'Mason', 'Mason', 'Hunter'],\n            calcBgs: true,\n            bgRatio: 0.25,\n            rolesGenerated: false,\n            assignments: [],\n            postBody: undefined,\n            sortOrder: {\n                col: 'role',\n                order: \"default\"\n            },\n            error: false\n        }\n\n        this.handlePlayersChange = this.handlePlayersChange.bind(this);\n        this.handleRolesChange = this.handleRolesChange.bind(this);\n        this.sortByRole = this.sortByRole.bind(this);\n        this.sortByPlayer = this.sortByPlayer.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.sortAssignmentsByProvidedRole = this.sortAssignmentsByProvidedRole.bind(this);\n        this.handleCalcBgChange = this.handleCalcBgChange.bind(this);\n        this.handleBGRatioChange = this.handleBGRatioChange.bind(this);\n    }\n\n    handlePlayersChange(event) {\n        const laurens = ['lrn', 'lurne', 'laurne', 'lauren', 'larne', 'lorne', 'lorn', 'lurn'];\n        const { value } = event.target;\n        const { roles, bgRatio, calcBgs } = this.state;\n        let players = value.indexOf(',') > 0 ? value.split(',') : value.split('\\n');\n        players = players.map(e => {\n            if (laurens.indexOf(e.trim().toLowerCase()) > 0)\n                return \"Laurne Free-Wifi-at-the Hilton\";\n            return e.trim()\n        })\n        const numRoles = roles.length + ((calcBgs) ? (Math.ceil(players.length * bgRatio)) : 0);\n        const error = this.state.error\n            && players.length < numRoles\n            ? UNSUPPORTED_PLAYER_COUNT\n            : false;\n        this.setState({\n            ...this.state,\n            players,\n            error\n        });\n    }\n\n    handleRolesChange(event) {\n        const { value } = event.target\n        const { players, bgRatio, calcBgs } = this.state;\n        let roles = value.indexOf(',') > 0 ? value.split(',') : value.split('\\n');\n        roles = roles.map(e => {\n            return e.trim()\n        })\n        const numRoles = roles.length + ((calcBgs) ? (Math.ceil(players.length * bgRatio)) : 0);\n        const error = this.state.error\n            && players.length < numRoles\n            ? UNSUPPORTED_PLAYER_COUNT\n            : false;\n        this.setState({\n            ...this.state,\n            roles,\n            error\n        });\n    }\n\n    sortByRole() {\n        let { assignments, sortOrder } = this.state;\n        const { col, order } = sortOrder;\n        const myOrder = col === 'player' || (order === 'default' || order === 'desc') ? 1 : -1;\n        assignments.sort((a, b) => {\n            if (a.Role < b.Role) {\n                return -1 * myOrder;\n            }\n            if (a.Role > b.Role) {\n                return 1 * myOrder;\n            }\n            // names must be equal\n            return 0;\n        });\n        this.setState({\n            ...this.state,\n            assignments,\n            sortOrder: {\n                col: 'role',\n                order: myOrder > 0 ? 'asc' : 'desc'\n            },\n            error: false\n        });\n    }\n\n    handleBGRatioChange(e) {\n        const bgRatio = e.target.value / 100\n        const { players, roles, calcBgs } = this.state;\n        const numRoles = roles.length + ((calcBgs) ? (Math.ceil(players.length * bgRatio)) : 0);\n        console.log(`bgRatioChange -calcBgs:${calcBgs}  Roles: ${numRoles}, Players ${players.length}`)\n        const error = this.state.error\n            && players.length < numRoles\n            ? UNSUPPORTED_PLAYER_COUNT\n            : false;\n        this.setState({\n            ...this.state,\n            bgRatio,\n            error\n        })\n    }\n\n    handleCalcBgChange() {\n        const calcBgs = !this.state.calcBgs;\n        const { players, roles, bgRatio } = this.state;\n        const numRoles = roles.length + ((calcBgs) ? (Math.ceil(players.length * bgRatio)) : 0);\n        console.log(`calcBgChange -calcBgs:${calcBgs}  Roles: ${numRoles}, Players ${players.length}`)\n        const error = this.state.error\n            && players.length < numRoles\n            ? UNSUPPORTED_PLAYER_COUNT\n            : false;\n        this.setState({\n            ...this.state,\n            calcBgs,\n            error\n        });\n    }\n\n    sortByPlayer() {\n        let { assignments, sortOrder } = this.state;\n        const { col, order } = sortOrder;\n        const myOrder = col === 'role' || (order === 'default' || order === 'desc') ? 1 : -1;\n        assignments.sort((a, b) => {\n            if (a.Player < b.Player) {\n                return -1 * myOrder;\n            }\n            if (a.Player > b.Player) {\n                return 1 * myOrder;\n            }\n            // names must be equal\n            return 0;\n        });\n        this.setState({\n            ...this.state,\n            assignments,\n            sortOrder: {\n                col: 'player',\n                order: myOrder > 0 ? 'asc' : 'desc'\n            }\n        })\n    }\n\n    handleSubmit() {\n        const { players, roles, calcBgs, bgRatio } = this.state;\n        if (players.length && roles.length) {\n            const numRoles = roles.length + ((calcBgs) ? (Math.ceil(players.length * bgRatio)) : 0);\n            console.log(`submit -calcBgs:${calcBgs}  Roles: ${numRoles}, Players ${players.length}`)\n\n            if (numRoles <= players.length) {\n                let assignments;\n                const postBody = {\n                    players,\n                    roles,\n                    calcBgs,\n                    bgRatio\n                }\n                assignments = getRolesTable(cloneDeep(postBody));\n                assignments = this.sortAssignmentsByProvidedRole(assignments)\n                this.setState({\n                    ...this.state,\n                    postBody,\n                    rolesGenerated: true,\n                    assignments\n                });\n            }\n            else {\n                this.setState({\n                    error: UNSUPPORTED_PLAYER_COUNT\n                });\n                console.log(`ERROR: ${UNSUPPORTED_PLAYER_COUNT}`);\n            }\n        }\n        else {\n            this.setState({\n                error: UNSUPPORTED_PLAYER_COUNT\n            });\n            console.log(`ERROR: ${UNSUPPORTED_PLAYER_COUNT}`);\n        }\n    }\n\n    sortAssignmentsByProvidedRole(assignments) {\n        const { roles } = this.state;\n        let sortedAssignments = [];\n        roles.forEach(role => {\n            let foundAssignment = assignments.find(a =>\n                a.Role === role);\n            sortedAssignments.push(foundAssignment)\n            assignments.splice(\n                assignments.indexOf(\n                    sortedAssignments[sortedAssignments.length - 1]), 1);\n        });\n        assignments.sort((a, b) => {\n            if (a.Role < b.Role) {\n                return -1;\n            }\n            if (a.Role > b.Role) {\n                return 1;\n            }\n            // names must be equal\n            return 0;\n        });\n        sortedAssignments.push(...assignments)\n        return sortedAssignments;\n    }\n\n    render() {\n        const { players } = this.state;\n        const TITLE = 'Role Randomizer';\n        const DEFAULT_PLAYERS = 'Enter All Players Here';\n        const DEFUALT_ROLES_DESCRIPTION = 'Enter Roles Here, OR\\nLeave blank to use:\\nDoctor,\\nSeer,\\nMason,\\nMason,\\nHunter';\n        // const DEFAULT_ROLES = ['Doctor', 'Seer', 'Mason', 'Mason', 'Hunter'];\n        // console.log(roles, DEFAULT_ROLES, roles == DEFAULT_ROLES)\n        return (\n            <div className=\"widthController\">\n                <Helmet>\n                    <title>{TITLE}</title>\n                </Helmet>\n                <Form>\n                    {!!this.state.error && <Row><Col><div className=\"error\">{UNSUPPORTED_PLAYER_COUNT}</div></Col></Row>}\n                    <Row>\n                        <Col></Col>\n                        <Col>\n                            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                                <Form.Label>Players</Form.Label>\n                                <Form.Control as=\"textarea\"\n                                    label=\"Players\"\n                                    multiline=\"15\"\n                                    rows=\"15\"\n                                    defaultValue={players.length ? players : DEFAULT_PLAYERS}\n                                    onChange={e => { this.handlePlayersChange(e) }}\n                                    onClick={(e) => { e.currentTarget.select() }}\n                                    isInvalid={this.state.error}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Player or role Count Invalid\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                        </Col>\n                        <Col>\n                            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                                <Form.Label>Roles</Form.Label>\n                                <Form.Control as=\"textarea\"\n                                    label=\"Roles\"\n                                    multiline=\"15\"\n                                    rows=\"15\"\n                                    defaultValue={DEFUALT_ROLES_DESCRIPTION}\n                                    // value={roles == DEFAULT_ROLES ? DEFUALT_ROLES_DESCRIPTION : roles}\n                                    onChange={e => { this.handleRolesChange(e) }}\n                                    onClick={(e) => { e.currentTarget.select() }}\n                                    isInvalid={this.state.error}\n                                />\n                            </Form.Group>\n                        </Col>\n                        <Col></Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Form.Check\n                                type={'switch'}\n                                id={`default-checkbox`}\n                                label={`Generate BG Roles`}\n                                className=\"sliderLabel\"\n                                checked={this.state.calcBgs}\n                                onChange={this.handleCalcBgChange}\n                            />\n                        </Col>\n\n                    </Row>\n                </Form>\n                <Row>\n                    <Col></Col>\n                    <Col size=\"sm\">\n                        <Form inline=\"true\" className=\"inlineForm\">\n\n                            <input className=\"slider\" type=\"range\" min=\"0\" max=\"100\" value={this.state.bgRatio * 100} onChange={e => { this.handleBGRatioChange(e) }}\n                            />\n\n                            <Form.Group controlId=\"exampleForm.ControlTextarea1\" inline=\"true\">\n                                <Form.Control as=\"input\"\n                                    type=\"text\"\n                                    size=\"sm\"\n                                    bsPrefix=\"form-control\"\n                                    className=\"smallTextBox\"\n                                    maxLength=\"4\"\n                                    value={this.state.bgRatio}\n                                    isInvalid={this.state.bgRatio > 1 || this.state.bgRatio < 0}\n                                    onChange={e =>\n                                        this.setState({\n                                            ...this.state, bgRatio: e.target.value\n                                        })}\n                                />\n                                <Form.Label className=\"smallerText\" inline=\"true\">BG Ratio</Form.Label>\n                            </Form.Group>\n                        </Form>\n                    </Col>\n                    <Col></Col>\n                </Row>\n                <Form>\n                    <Row>\n                        <Col>\n                            <Button type=\"button\" className=\"btn\" style={{ marginBottom: 20 }} onClick={this.handleSubmit}>Submit</Button>\n                        </Col>\n                    </Row>\n                </Form>\n\n                <ResponseTable assignments={this.state.assignments} sortByRole={this.sortByRole} sortByPlayer={this.sortByPlayer} />\n            </div >\n        );\n    };\n}\n\n\nexport default InputForms;","import React from 'react';\nimport InputForms from './components/InputForms'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\" >\n        <div className=\"header\">\n          <p>Werewolf Randomizer </p>\n        </div>\n        <div className=\"body\">\n\n          <div className=\"topic\">Use this tool in order to generate Randomized roles for your werewolf or Mafia game.</div>\n          <div className=\"description\">\n            This tool will also fill remaining slots with PJVs (Plain Jane Villages) if the number\n              of provided roles is less than the number or provided players\n              Additonally this tool can caluclate and generate an appropriate number of BG (Bad Guys)\n              for you game if given the proper parameters\n        </div>\n\n        </div>\n        <InputForms />\n      </div >\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}